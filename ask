#! /usr/bin/env python

import openai  # python-openai
import os, sys
from datetime import datetime
import config

if os.name == "nt":
    # Windows, Cygwin, etc. (either 32-bit or 64-bit)
    import pyreadline3
else:
    # sys.platform.startswith("linux"):  # could be "linux", "linux2", "linux3", ...
    # sys.platform == "darwin":          # MAC OS X
    import readline

# Modify the values of the strings below to fit your needs.

yes = ['yes', 'ye', 'y']
no = ['no', 'n', '']

class msg:
    CODE = "SUBMIT = [Ctrl+D]"
    NOCODE = "SUBMIT = two empty lines or [Ctrl+D]"
    LVL = "Level of creativity changed successfully."
    NOLVL = "Wrong input! Accepted values are [0-5]."
    WARNING = "ATTENTION!! You created a bookmark without saving it.\nType LIST or SAVE to prevent data loss."
    CONFIRM = "Exit anyway [y/N]?"
    LOST = "Your bookmark has been lost. Bye."
    WRONG = "Please use [y]es or [N]o."
    EXIT = "Now check your 'output.txt' file if needed. Bye."
    RESUME = "Ok! Resuming to your questions..."
    ADD = "Bookmark is pending for an update.\nWhen ready, type SAVE to save it to a file."
    LIST = "Bookmark:"
    NOW = "Time"
    ELAPSED = "Thinking:"
    SORRY = "I need more time to think but my CPUs seem quite busy now."
    ERROR = "Oops! Something went wrong. Please try again in a few minutes."
    TOP = "^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^"
    NOTE = "Write your note below"
    BTM = "----------------8<-------------[ cut here ]------------------"
    SAVE = "Your bookmark has been moved to output.txt"
    GEN = "Generated on"
    E404 = "Oops! Check if your 'output.txt' file is open..."

    if os.name == "nt":
      CODE = "SUBMIT = [Ctrl+Z]+[ENTER]"
      NOCODE = "SUBMIT = two empty lines or [Ctrl+Z]+[ENTER]"

# Don't change anything below this line

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def openAIQuery(ask, temp):
    response = openai.Completion.create(
      model="text-davinci-003",
      prompt=ask,
      temperature=temp,
      max_tokens=400,
      top_p=1,
      frequency_penalty=0,
      presence_penalty=0
    )
    if 'choices' in response:
        if len(response['choices']) > 0:
            answer = response['choices'][0]['text']
        else:
            answer = msg.SORRY
    else:
        answer = msg.SORRY
    return answer

# Validate the LVLn keyword, n=[0-5]
def validate_lvl(keyword):
    if not keyword.startswith('lvl'):
        return False
    try:
        int_value = int(keyword[3:].strip())
        if isinstance(int_value, int):
            return int_value
        else:
            return False
    except ValueError:
        return False

# Display the creativity level (0-5)
def show_creativity(lvl):
  progress_bar = ""
  for i in range(5):
    if i==0 and lvl != 0:
      progress_bar += bcolors.FAIL
    elif i in (1,2) and lvl != 0:
      progress_bar += bcolors.WARNING
    elif i in (3,4) and lvl != 0:
      progress_bar += bcolors.OKGREEN
    else:
      progress_bar += bcolors.FAIL
      break

    if i<lvl:
      progress_bar += "▣"
    else:
      progress_bar += "▢"
  return progress_bar

file_path = os.path.abspath(__file__) # full path of this script
dir_path = os.path.dirname(file_path) # full path of the directory of this script
help_file_path = os.path.join(dir_path,'help.txt') # absolute file path to display help
output_file_path = os.path.join(dir_path,'output.txt') # absolute file path to display help

added = False
mistake = False
code = False
bookmark = ""
bookmark_displayed = 0

lvl=2        # Default level of creativity, temperature=0.4
temp=0.2*lvl # Default level of creativity, converted for openAIQuery()

OPENAI_API_KEY = config.OPENAI_API_KEY
openai.api_key = os.getenv("OPENAI_API_KEY", OPENAI_API_KEY)

while True:
    prompt = "[" + show_creativity(lvl) + bcolors.ENDC + "] " + bcolors.BOLD + "ask ▾" + bcolors.ENDC
    print(prompt)
    ask = ""
    note = ""
    double_enter = 0

    while True:
        try:
            line = input()
            ask += line + '\n'
            if (len(line.rstrip())<1):
              double_enter += 1
            else:
              double_enter = 0
            if (len(line)>=3 and line[-1]=="?") or (code==False and double_enter>=2):
              break
        except EOFError:
            break

    ask = ask.strip()
    askKeywordCheck = ask.replace(" ", "").lower()

    # Check for special keywords
    if len(askKeywordCheck)<=6:
      creativity_lvl = validate_lvl(askKeywordCheck)
      if (askKeywordCheck == "add"):
        bookmark += response
        print(bcolors.WARNING + msg.ADD + "\n" + bcolors.ENDC)
        mistake = True
        added = True
        continue
      elif (added == True) and (askKeywordCheck == "list"):
        bookmark_displayed += 1
        repeat = len(msg.LIST)
        print(bcolors.OKBLUE + '═' * repeat + bcolors.ENDC)
        print(bcolors.WARNING + msg.LIST + bcolors.ENDC)
        print(bcolors.OKGREEN + bookmark.rstrip() + bcolors.ENDC)
        print(bcolors.OKBLUE + '═' * repeat + bcolors.ENDC)
        mistake = False
        continue
      elif (askKeywordCheck == "note"):
        bookmark += "\n\n" + msg.TOP + "\n"
        print("[" + bcolors.OKCYAN + bcolors.BOLD + msg.NOTE + bcolors.ENDC + "] ▾")
        while True:
          try:
              note = input()
              note = note.strip()
              bookmark += note + "\n"
              if (len(note)<1):
                double_enter += 1
              else:
                double_enter = 0
              if (code==False and double_enter>=2):
                bookmark = bookmark.rstrip() + "\n"
                bookmark += msg.BTM + "\n\n"
                break
          except EOFError:
              bookmark += msg.BTM + "\n\n"
              break
        continue
      elif (askKeywordCheck == "help"):
        f = open(help_file_path, 'r', encoding='utf-8')
        content = f.read()
        print(bcolors.WARNING + content + bcolors.ENDC)
        f.close()
        continue
      elif (askKeywordCheck == "save"):
        now = datetime.now()
        current_time = now.strftime("%d.%m.%Y %H:%M:%S")
        print(bcolors.WARNING + msg.SAVE + bcolors.ENDC)
        try:
            with open(output_file_path, 'a+', encoding='utf-8') as f:
                f.write(bookmark + "\n\n▲▲▲ " + msg.GEN + " " + current_time + " ▲▲▲\n")
                mistake = False
                bookmark = ""
        except IOError:
            print(bcolors.WARNING + msg.E404 + bcolors.ENDC)
        continue
      elif (askKeywordCheck == "code"):
        code = True
        print(bcolors.WARNING + msg.CODE + bcolors.ENDC)
        continue
      elif (askKeywordCheck == "nocode"):
        code = False
        print(bcolors.WARNING + msg.NOCODE + bcolors.ENDC)
        continue
      elif (creativity_lvl is not False and (isinstance(creativity_lvl, int) and creativity_lvl < 0 or creativity_lvl > 5)):
        print(bcolors.FAIL + msg.NOLVL + bcolors.ENDC)
        continue
      elif (creativity_lvl is not False and isinstance(creativity_lvl, int) and 0 <= creativity_lvl <= 5):
        lvl = creativity_lvl
        temp = round(0.2 * lvl, 1)
        print(bcolors.WARNING + msg.LVL + bcolors.ENDC)
        continue
      else:
        if (len(bookmark)>0) and (bookmark_displayed==0):
          print(bcolors.FAIL + msg.WARNING + "\n" + bcolors.ENDC)
          end = bcolors.FAIL + bcolors.BOLD + msg.CONFIRM + " " + bcolors.ENDC
          while True:
              choice = input(end).lower()
              if choice in yes:
                  print(bcolors.WARNING + msg.LOST + "\n" + bcolors.ENDC)
                  exit()
              elif choice in no:
                  mistake = True
                  break
              else:
                  print(bcolors.WARNING + msg.WRONG + bcolors.ENDC)
        if not mistake:
          print(bcolors.WARNING + msg.EXIT + "\n" + bcolors.ENDC)
          exit()
        else:
          print(bcolors.WARNING + msg.RESUME + bcolors.ENDC)
          continue

    before = datetime.now()

    try:
      response = openAIQuery(ask, temp)
      print(bcolors.OKGREEN + response + bcolors.ENDC)
    except Exception as e:
      print(bcolors.FAIL + msg.ERROR + bcolors.ENDC)
      continue

    now = datetime.now()
    elapsed = (datetime.now() - before).total_seconds()
    elapsed = "~ 0" if (elapsed < 0.01) else '{0:.2f}'.format(elapsed)
    current_time = now.strftime("%H:%M:%S")
    repeat = len(msg.NOW) + len(current_time) + len(msg.ELAPSED) + len(elapsed) + 8
    print(bcolors.OKBLUE + msg.NOW + " " + str(current_time) + "  ·  " + msg.ELAPSED + " " + str(elapsed) + "s" + bcolors.ENDC)
    print(bcolors.OKBLUE + '─' * repeat + bcolors.ENDC)
